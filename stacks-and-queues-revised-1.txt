####Exercises

> What is the main difference between a stack and a queue?

A: A stack works based on the LIFO (Last In First Out) principle, and a queue works based one the FIFO (First In First Out) principle.

> What are the similarities between stacks and queues?

A: Both are a collection of objects, with in/out priorities for completion.

> Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

A: I would use stacks for both the UNDO and REDO options, since a stack would place the last change back onto the top of the stack. So if I run UNDO, the last change on top will be removed; then if I run the REDO option, that last change that was removed from the previous stack and placed on top of another stack will be run.


####Programming Questions

> Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

A: Pseudocode:

FUNCTION REVERSE(string)
  INIT a new stack
  FOR each character in string
    CALL stack.push WITH character
  END FOR
  INIT reversed to empty string
  WHILE stack is not empty
    CALL stack.pop RETURNING character
    APPEND character to reversed
  END WHILE
  RETURN reversed
END FUNCTION

- - -

function reverseStack(string) {
	let stack = [];
	
	for(let i = 0; i < string.length; i++) {
		stack.push(string[i]);
	}

	let reversed = '';
	
	while(stack.length > 0) {
		let removed = stack.pop();
		reversed += removed;
	}
  	return reversed;
}
console.log(reverseStack("Bloc!"));



> Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

A: Pseudocode:

CLASS STACK
FUNCTION PUSH(item)
INPUT queue array
INPUT PUSHITEM method
    FOR each item in queue
    CALL queue.push
    END FOR
END FUNCTION
INIT equal to new stack
    CALL stack on pushItem method
END CLASS

- - - 

class Stack {
    constructor(item) {
        this.queue = ["A", "B", "C"];
    }

    popItem(item) {
        for(var i = 0; i > this.queue.length; i++) {
            this.queue.push(item[i]);
        }
    this.queue.pop();
    return this.queue;
    }
}

let stack = new Stack();

stack.popItem([]);



> Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

A:

CLASS QUEUE
FUNCTION enqueue(items)
    APPEND items to the end of the list
END FUNCTION

FUNCTION dequeue
    SET items to the first element
    REMOVE FIRST element of list from list
    RETURN items
END FUNCTION
END CLASS

- - -

class Queue {
    constructor(items) {
        this.items = items;
    }

    enqueue(items) {
        this.items.push(items);
        return this.items;
    }

    dequeue() {
        this.items.splice(0,1);
        return this.items;
    }
}

let newQueue = new Queue(["Apple", "Banana", "Pear"]);

console.log(newQueue.enqueue("Banana"));
console.log(newQueue.dequeue());